@page "/levels/edit"
@using Microsoft.EntityFrameworkCore
@using HRMS.Models
@inject IDbContextFactory<HRMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>编辑职位</PageTitle>

<h1>编辑职位</h1>

<hr />
@if (Level is null)
{
    <p><em>加载中...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Level" OnValidSubmit="UpdateLevel" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Level.Id" value="@Level.Id" />
                <div class="mb-3">
                    <label for="levelname" class="form-label">职位名称：</label>
                    <InputText id="levelname" @bind-Value="Level.LevelName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Level.LevelName" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">保存</button>
                <a href="/levels"><button class="btn btn-primary">返回</button></a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Level? Level { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Level ??= await context.Level.FirstOrDefaultAsync(m => m.Id == Id);

        if (Level is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateLevel()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Level!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!LevelExists(Level!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/levels");
    }

    private bool LevelExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Level.Any(e => e.Id == id);
    }
}