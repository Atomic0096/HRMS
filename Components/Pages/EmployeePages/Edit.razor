@page "/employees/edit"
@using Microsoft.EntityFrameworkCore
@using HRMS.Models
@inject IDbContextFactory<HRMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>编辑员工</PageTitle>

<h1>编辑员工</h1>

<hr />
@if (Employee is null)
{
    <p><em>加载中...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="UpdateEmployee" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Employee.Id" value="@Employee.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">姓名：</label>
                    <InputText id="name" @bind-Value="Employee.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Employee.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="gender" class="form-label">性别</label>
                    <InputSelect id="gender" @bind-Value="Employee.Gender" class="form-control">
                        <!--下拉框中的选项-->
                        @if (Employee.Gender == "男")
                        {
                            <option value="男">男</option>
                            <option value="女">女</option>
                        }else{
                            <option value="女">女</option>
                            <option value="男">男</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Employee.Gender" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="departmentid" class="form-label">部门：</label>
                    <InputSelect id="departmentid" @bind-Value="Employee.DepartmentId" class="form-control">
                        <!--下拉框中的选项-->
                        <option value="">-- 选择部门 --</option>
                        @foreach (var department in Departments)
                        {
                            <option value="@department.Id">@department.DepartmentName<!--下拉框中的文本--></option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Employee.DepartmentId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="levelid" class="form-label">职位：</label>
                    <InputSelect id="levelid" @bind-Value="Employee.LevelId" class="form-control">
                        <!--下拉框中的选项-->
                        <option value="">-- 选择职位 --</option>
                        @foreach (var level in Levels)
                        {
                            <option value="@level.Id">@level.LevelName<!--下拉框中的文本--></option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Employee.LevelId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofbirth" class="form-label">出生日期：</label>
                    <InputDate id="dateofbirth" @bind-Value="Employee.DateOfBirth" class="form-control" />
                    <ValidationMessage For="() => Employee.DateOfBirth" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="salary" class="form-label">薪资：</label>
                    <InputNumber id="salary" @bind-Value="Employee.Salary" class="form-control" />
                    <ValidationMessage For="() => Employee.Salary" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateofentry" class="form-label">入职日期：</label>
                    <InputDate id="dateofentry" @bind-Value="Employee.DateOfEntry" class="form-control" />
                    <ValidationMessage For="() => Employee.DateOfEntry" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="annualleave" class="form-label">年假：</label> 
                    <InputNumber id="annualleave" @bind-Value="Employee.AnnualLeave" class="form-control" /> 
                    <ValidationMessage For="() => Employee.AnnualLeave" class="text-danger" /> 
                </div>
                <button type="submit" class="btn btn-primary">保存</button>
                <a href="/employees"><button class="btn btn-primary">返回</button></a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Employee? Employee { get; set; }
    private List<Department> Departments { get; set; } = new();
    private List<Level> Levels { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Departments = await context.Department.ToListAsync();
        Levels = await context.Level.ToListAsync();
        Employee ??= await context.Employee.FirstOrDefaultAsync(m => m.Id == Id);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Employee!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmployeeExists(Employee!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/employees");
    }

    private bool EmployeeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Employee.Any(e => e.Id == id);
    }
}
