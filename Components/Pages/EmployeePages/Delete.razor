@page "/employees/delete"
@using Microsoft.EntityFrameworkCore
@using HRMS.Models
@inject IDbContextFactory<HRMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>删除员工</PageTitle>

<h1>删除员工</h1>

<div>
    <hr />
    @if (employee is null)
    {
        <p><em>加载中...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">姓名</dt>
            <dd class="col-sm-10">@employee.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">性别</dt>
            <dd class="col-sm-10">@employee.Gender</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">部门</dt>
            <dd class="col-sm-10">@employee.Department?.DepartmentName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">职位</dt>
            <dd class="col-sm-10">@employee.Level?.LevelName</dd>
        </dl>
        <EditForm method="post" Model="employee" OnValidSubmit="DeleteEmployee" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(employee is null)">删除</button>
            <a href="/employees"><button class="btn btn-primary">返回</button></a>
        </EditForm>
    }
</div>

@code {
    private Employee? employee;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employee = await context.Employee
            .Include(e => e.Department)
            .Include(e => e.Level)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Employee.Remove(employee!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
}
