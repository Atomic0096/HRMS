@page "/cultivations/details"
@using Microsoft.EntityFrameworkCore
@using HRMS.Models
@inject IDbContextFactory<HRMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Cultivation</h2>
    <hr />
    @if (cultivation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@cultivation.StartDate</dd>
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@cultivation.EndDate</dd>
            <dt class="col-sm-2">IsAccepted</dt>
            <dd class="col-sm-10">@cultivation.IsAccepted</dd>
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@cultivation.Content</dd>
            <dt class="col-sm-2">UserId</dt>
            <dd class="col-sm-10">@cultivation.UserId</dd>
        </dl>
        <div>
            <a href="@($"/cultivations/edit?id={cultivation.Id}")">Edit</a> |
            <a href="@($"/cultivations")">Back to List</a>
        </div>
    }
</div>

@code {
    private Cultivation? cultivation;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        cultivation = await context.Cultivation.FirstOrDefaultAsync(m => m.Id == Id);

        if (cultivation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
