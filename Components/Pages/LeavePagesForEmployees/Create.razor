@page "/leavesforemployees/create"
@using Microsoft.EntityFrameworkCore
@using HRMS.Models
@using System.Security.Claims
@inject IDbContextFactory<HRMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>新建请假</PageTitle>

<h1>新建请假</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Leave" OnValidSubmit="AddLeave" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <input type="hidden" name="Leave.ApplicationUserId" value="@Leave.ApplicationUserId">
            <div class="mb-3">
                <label for="startdate" class="form-label">开始日期：</label> 
                <InputDate id="startdate" @bind-Value="Leave.StartDate" class="form-control" /> 
                <ValidationMessage For="() => Leave.StartDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="enddate" class="form-label">结束日期：</label> 
                <InputDate id="enddate" @bind-Value="Leave.EndDate" class="form-control" /> 
                <ValidationMessage For="() => Leave.EndDate" class="text-danger" /> 
            </div>             
            <button type="submit" class="btn btn-primary">申请</button>
            <a href="/leavesforemployees"><button class="btn btn-primary">返回</button></a>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private Leave Leave { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var CurrentUser = AuthState.User;
        Leave.ApplicationUserId = CurrentUser.FindFirstValue(ClaimTypes.NameIdentifier);
        if (Leave.ApplicationUserId is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    private async Task AddLeave()
    {
        using var context = DbFactory.CreateDbContext();
        context.Leave.Add(Leave);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/leavesforemployees");
    }
}